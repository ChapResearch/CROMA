<?php

function states_list()
{
  return array(
	       '[none]'=>'[none]',
	       'Alabama'=>'Alabama',
	       'Alaska'=>'Alaska',
	       'Arizona'=>'Arizona',
	       'Arkansas'=>'Arkansas',
	       'California'=>'California',
	       'Colorado'=>'Colorado',
	       'Connecticut'=>'Connecticut',
	       'Delaware'=>'Delaware',
	       'District Of Columbia'=>'District Of Columbia',
	       'Florida'=>'Florida',
	       'Georgia'=>'Georgia',
	       'Hawaii'=>'Hawaii',
	       'Idaho'=>'Idaho',
	       'Illinois'=>'Illinois',
	       'Indiana'=>'Indiana',
	       'Iowa'=>'Iowa',
	       'Kansas'=>'Kansas',
	       'Kentucky'=>'Kentucky',
	       'Louisiana'=>'Louisiana',
	       'Maine'=>'Maine',
	       'Maryland'=>'Maryland',
	       'Massachusetts'=>'Massachusetts',
	       'Michigan'=>'Michigan',
	       'Minnesota'=>'Minnesota',
	       'Mississippi'=>'Mississippi',
	       'Missouri'=>'Missouri',
	       'Montana'=>'Montana',
	       'Nebraska'=>'Nebraska',
	       'Nevada'=>'Nevada',
	       'New Hampshire'=>'New Hampshire',
	       'New Jersey'=>'New Jersey',
	       'New Mexico'=>'New Mexico',
	       'New York'=>'New York',
	       'North Carolina'=>'North Carolina',
	       'North Dakota'=>'North Dakota',
	       'Ohio'=>'Ohio',
	       'Oklahoma'=>'Oklahoma',
	       'Oregon'=>'Oregon',
	       'Pennsylvania'=>'Pennsylvania',
	       'Rhode Island'=>'Rhode Island',
	       'South Carolina'=>'South Carolina',
	       'South Dakota'=>'South Dakota',
	       'Tennessee'=>'Tennessee',
	       'Texas'=>'Texas',
	       'Utah'=>'Utah',
	       'Vermont'=>'Vermont',
	       'Virginia'=>'Virginia',
	       'Washington'=>'Washington',
	       'West Virginia'=>'West Virginia',
	       'Wisconsin'=>'Wisconsin',
	       'Wyoming'=>'Wyoming',
	       'DC' => 'District of Columbia',
	       'AS' => 'American Samoa',
	       'GU' => 'Guam',
	       'MP' => 'Northern Mariana Islands',
	       'PR' => 'Puerto Rico',
	       'UM' => 'United States Minor Outlying Islands',
	       'VI' => 'Virgin Islands, U.S.',
	       'Other'=>'Other');
}

function countries_list()
{
  return array(
	       '[none]'=>'[none]',
	       'Afghanistan'=>'Afghanistan', 
	       'Albania'=>'Albania', 
	       'Algeria'=>'Algeria', 
	       'American Samoa'=>'American Samoa', 
	       'Andorra'=>'Andorra', 
	       'Angola'=>'Angola', 
	       'Anguilla'=>'Anguilla', 
	       'Antarctica'=>'Antarctica', 
	       'Antigua and Barbuda'=>'Antigua and Barbuda', 
	       'Argentina'=>'Argentina', 
	       'Armenia'=>'Armenia', 
	       'Aruba'=>'Aruba', 
	       'Australia'=>'Australia', 
	       'Austria'=>'Austria', 
	       'Azerbaijan'=>'Azerbaijan', 
	       'Bahamas'=>'Bahamas', 
	       'Bahrain'=>'Bahrain', 
	       'Bangladesh'=>'Bangladesh', 
	       'Barbados'=>'Barbados', 
	       'Belarus'=>'Belarus', 
	       'Belgium'=>'Belgium', 
	       'Belize'=>'Belize', 
	       'Benin'=>'Benin', 
	       'Bermuda'=>'Bermuda', 
	       'Bhutan'=>'Bhutan', 
	       'Bolivia'=>'Bolivia', 
	       'Bosnia and Herzegovina'=>'Bosnia and Herzegovina', 
	       'Botswana'=>'Botswana', 
	       'Bouvet Island'=>'Bouvet Island', 
	       'Brazil'=>'Brazil', 
	       'British Indian Ocean Territory'=>'British Indian Ocean Territory', 
	       'Brunei Darussalam'=>'Brunei Darussalam', 
	       'Bulgaria'=>'Bulgaria', 
	       'Burkina Faso'=>'Burkina Faso', 
	       'Burundi'=>'Burundi', 
	       'Cambodia'=>'Cambodia', 
	       'Cameroon'=>'Cameroon', 
	       'Canada'=>'Canada', 
	       'Cape Verde'=>'Cape Verde', 
	       'Cayman Islands'=>'Cayman Islands', 
	       'Central African Republic'=>'Central African Republic', 
	       'Chad'=>'Chad', 
	       'Chile'=>'Chile', 
	       'China'=>'China', 
	       'Christmas Island'=>'Christmas Island', 
	       'Cocos (Keeling) Islands'=>'Cocos (Keeling) Islands', 
	       'Colombia'=>'Colombia', 
	       'Comoros'=>'Comoros', 
	       'Congo'=>'Congo', 
	       'Congo, The Democratic Republic of The'=>'Congo, The Democratic Republic of The', 
	       'Cook Islands'=>'Cook Islands', 
	       'Costa Rica'=>'Costa Rica', 
	       'Cote D.ivoire'=>'Cote D.ivoire', 
	       'Croatia'=>'Croatia', 
	       'Cuba'=>'Cuba', 
	       'Cyprus'=>'Cyprus', 
	       'Czech Republic'=>'Czech Republic', 
	       'Denmark'=>'Denmark', 
	       'Djibouti'=>'Djibouti', 
	       'Dominica'=>'Dominica', 
	       'Dominican Republic'=>'Dominican Republic', 
	       'Ecuador'=>'Ecuador', 
	       'Egypt'=>'Egypt', 
	       'El Salvador'=>'El Salvador', 
	       'Equatorial Guinea'=>'Equatorial Guinea', 
	       'Eritrea'=>'Eritrea', 
	       'Estonia'=>'Estonia', 
	       'Ethiopia'=>'Ethiopia', 
	       'Falkland Islands (Malvinas)'=>'Falkland Islands (Malvinas)', 
	       'Faroe Islands'=>'Faroe Islands', 
	       'Fiji'=>'Fiji', 
	       'Finland'=>'Finland', 
	       'France'=>'France', 
	       'French Guiana'=>'French Guiana', 
	       'French Polynesia'=>'French Polynesia', 
	       'French Southern Territories'=>'French Southern Territories', 
	       'Gabon'=>'Gabon', 
	       'Gambia'=>'Gambia', 
	       'Georgia'=>'Georgia', 
	       'Germany'=>'Germany', 
	       'Ghana'=>'Ghana', 
	       'Gibraltar'=>'Gibraltar', 
	       'Greece'=>'Greece', 
	       'Greenland'=>'Greenland', 
	       'Grenada'=>'Grenada', 
	       'Guadeloupe'=>'Guadeloupe', 
	       'Guam'=>'Guam', 
	       'Guatemala'=>'Guatemala', 
	       'Guinea'=>'Guinea', 
	       'Guinea-bissau'=>'Guinea-bissau', 
	       'Guyana'=>'Guyana', 
	       'Haiti'=>'Haiti', 
	       'Heard Island and Mcdonald Islands'=>'Heard Island and Mcdonald Islands', 
	       'Holy See (Vatican City State)'=>'Holy See (Vatican City State)', 
	       'Honduras'=>'Honduras', 
	       'Hong Kong'=>'Hong Kong', 
	       'Hungary'=>'Hungary', 
	       'Iceland'=>'Iceland', 
	       'India'=>'India', 
	       'Indonesia'=>'Indonesia', 
	       'Iran, Islamic Republic of'=>'Iran, Islamic Republic of', 
	       'Iraq'=>'Iraq', 
	       'Ireland'=>'Ireland', 
	       'Israel'=>'Israel', 
	       'Italy'=>'Italy', 
	       'Jamaica'=>'Jamaica', 
	       'Japan'=>'Japan', 
	       'Jordan'=>'Jordan', 
	       'Kazakhstan'=>'Kazakhstan', 
	       'Kenya'=>'Kenya', 
	       'Kiribati'=>'Kiribati', 
	       'Korea, Democratic People.s Republic of'=>'Korea, Democratic People.s Republic of', 
	       'Korea, Republic of'=>'Korea, Republic of', 
	       'Kuwait'=>'Kuwait', 
	       'Kyrgyzstan'=>'Kyrgyzstan', 
	       'Lao People.s Democratic Republic'=>'Lao People.s Democratic Republic', 
	       'Latvia'=>'Latvia', 
	       'Lebanon'=>'Lebanon', 
	       'Lesotho'=>'Lesotho', 
	       'Liberia'=>'Liberia', 
	       'Libyan Arab Jamahiriya'=>'Libyan Arab Jamahiriya', 
	       'Liechtenstein'=>'Liechtenstein', 
	       'Lithuania'=>'Lithuania', 
	       'Luxembourg'=>'Luxembourg', 
	       'Macao'=>'Macao', 
	       'Macedonia, The Former Yugoslav Republic of'=>'Macedonia, The Former Yugoslav Republic of', 
	       'Madagascar'=>'Madagascar', 
	       'Malawi'=>'Malawi', 
	       'Malaysia'=>'Malaysia', 
	       'Maldives'=>'Maldives', 
	       'Mali'=>'Mali', 
	       'Malta'=>'Malta', 
	       'Marshall Islands'=>'Marshall Islands', 
	       'Martinique'=>'Martinique', 
	       'Mauritania'=>'Mauritania', 
	       'Mauritius'=>'Mauritius', 
	       'Mayotte'=>'Mayotte', 
	       'Mexico'=>'Mexico', 
	       'Micronesia, Federated States of'=>'Micronesia, Federated States of', 
	       'Moldova, Republic of'=>'Moldova, Republic of', 
	       'Monaco'=>'Monaco', 
	       'Mongolia'=>'Mongolia', 
	       'Montserrat'=>'Montserrat', 
	       'Morocco'=>'Morocco', 
	       'Mozambique'=>'Mozambique', 
	       'Myanmar'=>'Myanmar', 
	       'Namibia'=>'Namibia', 
	       'Nauru'=>'Nauru', 
	       'Nepal'=>'Nepal', 
	       'Netherlands'=>'Netherlands', 
	       'Netherlands Antilles'=>'Netherlands Antilles', 
	       'New Caledonia'=>'New Caledonia', 
	       'New Zealand'=>'New Zealand', 
	       'Nicaragua'=>'Nicaragua', 
	       'Niger'=>'Niger', 
	       'Nigeria'=>'Nigeria', 
	       'Niue'=>'Niue', 
	       'Norfolk Island'=>'Norfolk Island', 
	       'Northern Mariana Islands'=>'Northern Mariana Islands', 
	       'Norway'=>'Norway', 
	       'Oman'=>'Oman', 
	       'Pakistan'=>'Pakistan', 
	       'Palau'=>'Palau', 
	       'Palestinian Territory, Occupied'=>'Palestinian Territory, Occupied', 
	       'Panama'=>'Panama', 
	       'Papua New Guinea'=>'Papua New Guinea', 
	       'Paraguay'=>'Paraguay', 
	       'Peru'=>'Peru', 
	       'Philippines'=>'Philippines', 
	       'Pitcairn'=>'Pitcairn', 
	       'Poland'=>'Poland', 
	       'Portugal'=>'Portugal', 
	       'Puerto Rico'=>'Puerto Rico', 
	       'Qatar'=>'Qatar', 
	       'Reunion'=>'Reunion', 
	       'Romania'=>'Romania', 
	       'Russian Federation'=>'Russian Federation', 
	       'Rwanda'=>'Rwanda', 
	       'Saint Helena'=>'Saint Helena', 
	       'Saint Kitts and Nevis'=>'Saint Kitts and Nevis', 
	       'Saint Lucia'=>'Saint Lucia', 
	       'Saint Pierre and Miquelon'=>'Saint Pierre and Miquelon', 
	       'Saint Vincent and The Grenadines'=>'Saint Vincent and The Grenadines', 
	       'Samoa'=>'Samoa', 
	       'San Marino'=>'San Marino', 
	       'Sao Tome and Principe'=>'Sao Tome and Principe', 
	       'Saudi Arabia'=>'Saudi Arabia', 
	       'Senegal'=>'Senegal', 
	       'Serbia and Montenegro'=>'Serbia and Montenegro', 
	       'Seychelles'=>'Seychelles', 
	       'Sierra Leone'=>'Sierra Leone', 
	       'Singapore'=>'Singapore', 
	       'Slovakia'=>'Slovakia', 
	       'Slovenia'=>'Slovenia', 
	       'Solomon Islands'=>'Solomon Islands', 
	       'Somalia'=>'Somalia', 
	       'South Africa'=>'South Africa', 
	       'South Georgia and The South Sandwich Islands'=>'South Georgia and The South Sandwich Islands', 
	       'Spain'=>'Spain', 
	       'Sri Lanka'=>'Sri Lanka', 
	       'Sudan'=>'Sudan', 
	       'Suriname'=>'Suriname', 
	       'Svalbard and Jan Mayen'=>'Svalbard and Jan Mayen', 
	       'Swaziland'=>'Swaziland', 
	       'Sweden'=>'Sweden', 
	       'Switzerland'=>'Switzerland', 
	       'Syrian Arab Republic'=>'Syrian Arab Republic', 
	       'Taiwan'=>'Taiwan', 
	       'Tajikistan'=>'Tajikistan', 
	       'Tanzania, United Republic of'=>'Tanzania, United Republic of',
	       'Thailand'=>'Thailand', 
	       'Timor-leste'=>'Timor-leste', 
	       'Togo'=>'Togo', 
	       'Tokelau'=>'Tokelau', 
	       'Tonga'=>'Tonga', 
	       'Trinidad and Tobago'=>'Trinidad and Tobago', 
	       'Tunisia'=>'Tunisia', 
	       'Turkey'=>'Turkey', 
	       'Turkmenistan'=>'Turkmenistan', 
	       'Turks and Caicos Islands'=>'Turks and Caicos Islands', 
	       'Tuvalu'=>'Tuvalu', 
	       'Uganda'=>'Uganda', 
	       'Ukraine'=>'Ukraine', 
	       'United Arab Emirates'=>'United Arab Emirates', 
	       'United Kingdom'=>'United Kingdom', 
	       'United States'=>'United States', 
	       'United States Minor Outlying Islands'=>'United States Minor Outlying Islands', 
	       'Uruguay'=>'Uruguay', 
	       'Uzbekistan'=>'Uzbekistan', 
	       'Vanuatu'=>'Vanuatu', 
	       'Venezuela'=>'Venezuela', 
	       'Viet Nam'=>'Viet Nam', 
	       'Virgin Islands, British'=>'Virgin Islands, British', 
	       'Virgin Islands, U.S.'=>'Virgin Islands, U.S.', 
	       'Wallis and Futuna'=>'Wallis and Futuna', 
	       'Western Sahara'=>'Western Sahara', 
	       'Yemen'=>'Yemen', 
	       'Zambia'=>'Zambia', 
	       'Zimbabwe'=>'Zimbabwe',
	       'Other'=>'Other');
}

/* getFields() - returns the key value pairs given by the array of fields. 

Ex: 
$fields = array("name", "UID");
$array = array("name" => "Rachel", "UID" => "1", "age" => "17");
print_r(getFields($fields, $array));

-----output-----
"name" => "Rachel"
"UID" => "1"
 */
function getFields($fields, $array)
{
  return array_intersect_key($array, array_flip($fields));
}

/* stripTags() - quick function to strip tags from many fields at once.
 */
function stripTags($fields, $allowedTags = ALLOWED_TAGS)
{
  $retArr = array();
  if(is_array($fields)){
    foreach($fields as $name => $value){
      if(is_array($value)){
	dpm('You cannot pass arrays to the stripTags function!');
	continue;
      }
      $retArr[$name] = strip_tags($value, $allowedTags);
    }
    return $retArr;
  } else { // if the "fields" isn't an array
    return strip_tags($fields, $allowedTags);
  }
}

/* orderByValue() - orders a multidimensional array by the given $orderParam. Note that the array is passed by reference, and therefore only true/false is returned by the function (indicating success/failure).
Ex: 
$array = new array(
new array('test'=>'a', 'test2'=>1),
new array('test'=>'c', 'test2'=>3),
new array('test'=>'b', 'test2'=>2),
);
orderByValue($array, 'test', false);
*/
function orderByValue(&$array, $orderParam, $isAscending = false)
{
  // custom sort function using an anonymous PHP function
  if($orderParam == 'eventDate') {
    $compare = function($a, $b) use ($isAscending) {
      $timeA = dbGetEarliestTimeForOutreach($a['OID']);
      $timeB = dbGetEarliestTimeForOutreach($b['OID']);
      if($timeA == $timeB) {
	return 0;
      }
      if($isAscending) {
	return $timeA < $timeB ? -1 : 1;
      } else {
	return $timeA < $timeB ? -1 : 1;
      }
    };
  } else {
    $compare = function($a, $b) use ($orderParam, $isAscending){
      if (is_numeric($a[$orderParam])){
	if ($a[$orderParam] == $b[$orderParam]){
	  return 0;
	}
	if ($isAscending) {
	  return $a[$orderParam] < $b[$orderParam] ? -1 : 1;
	} else {
	  return $a[$orderParam] < $b[$orderParam] ? 1 : -1; // sorts in reverse
	}
      } else { // meant to compare strings
	if ($isAscending) {
	  return strcmp($a[$orderParam],$b[$orderParam]);
	} else {
	  return strcmp($b[$orderParam],$a[$orderParam]); // sorts in reverse
	}
      }
    };
  }
  return usort($array, $compare);
}

/* sortHeader() - creates the header for a table to automatically sort the following rows
 */
function sortHeader ($orderParam, $extraParams, $isAscending, $label, $field, $page)
{
  $retVal = "<a href=\"?q=$page&sort=$field";
  /*
  if ($showAll) {
    $retVal .= "&showAll";
  }
  */
  foreach ($extraParams as $param => $value){
    $retVal .= "&$param=$value";
  }
  if ($orderParam == $field && !$isAscending) { // if the user has "double clicked"
    $retVal .= "&isAscending";
  }
  if ($orderParam == $field){
    $retVal .= "\"><b>$label</b></a>"; // make the link bold if the current sort
  } else {
    $retVal .= "\">$label</a>";
  }

  return $retVal;
}


/* showAllButton() - much like showHeader() compose a piece of HTML for to allow the user to click to include/exclude data in the table.
*/
function showAllButton($page,$sort,$reverse,$all, $showText, $hideText)
{
     $retVal = "<a href=\"?q=$page&sort=$sort";

     if($reverse) {
	  $retVal .= "&isAscending";
     }

     if(!$all) {
	  $retVal .= "&showAll";
     }

     $retVal .= '"><button type="button">';
     if($all) {
       $retVal .= $hideText;
     } else {
       $retVal .= $showText;
     }

     $retVal .= '</button></a>';

     return($retVal);
}

/* chopString() - shortens a string to the desired length (adding '...'). $incEOL refers
                  to whether or not to include PHP_EOL in the count (aka removing that many
                  extra characters). This is done to ensure that when Drupal adds in EOLs,
                  they don't put the text over the limit.
 */
function chopString($str,$length,$incEOL = false)
{
  $finalString = "";

  if(strlen($str)>$length) {
    if($incEOL){
      $numEOL = substr_count($str, PHP_EOL);
      $finalString .= substr($str,0,$length - $numEOL);
    } else {
      $finalString .= substr($str,0,$length);
    }
    return $finalString . '...';
  } else {
    return $str;
  }
}

/* clearCurrentTeam() - unsets the current team. getCurrentTeam() below will set it to a default if necessary.
 */
function clearCurrentTeam(){
  unset($_SESSION['currentTeam']);
}

/* getCurrentTeam() - gets the current team if one has been defined. If not, this function will set the current team to the first one the user registered for
 */
function getCurrentTeam()
{
  global $user;
  if(isset($_SESSION['currentTeam'])){
    if(isMyTeam($_SESSION['currentTeam']['TID'])){
      return $_SESSION['currentTeam'];
    } else {
      drupal_set_message("You are no longer on {$_SESSION['currentTeam']['name']}!", 'error');
      return selectDefaultTeam();
    }
  } else {
    return selectDefaultTeam();
  }
}

function selectDefaultTeam()
{
  global $user;
  $TID = dbGetDefaultTIDForUser($user->uid);
  if ($TID != false){
    $name = dbGetTeamName($TID);
  } else {
    $teams = dbGetTeamsForUser($user->uid);
    if(empty($teams)){
      return false;
    }
    $TID = $teams[0]['TID'];
    $name = $teams[0]['name'];
  }
  return setCurrentTeam($TID, $name);
}

/* setCurrentTeam() - sets the current team to the team with the given TID and teamName. Note that the teamName is given to save time in checking the database
 */
function setCurrentTeam($TID, $teamName = null, $teamNumber = null)
{
  $_SESSION['currentTeam']['TID'] = $TID;
  if ($teamName != null){
    $_SESSION['currentTeam']['name'] = $teamName;
  } else {
    $_SESSION['currentTeam']['name'] = dbGetTeamName($TID);
  }
  if ($teamNumber != null){
    $_SESSION['currentTeam']['number'] = $teamNumber;
  } else {
    $_SESSION['currentTeam']['number'] = dbGetTeamNumber($TID);
  }
  return $_SESSION['currentTeam'];
}

/* teamIsIneligible() - returns true if the team given by $TID fails to meet requirements for interacting with CROMA.
 */
function teamIsIneligible($TID) {
  if(empty($TID)){
    return true;
  }
  $team = dbGetTeam($TID);
  return !($team['isActive'] && $team['isApproved']);
}

/* getSharedTeams() - returns what teams the user has in common with the user given by UID. Note that this function returns an array of TIDs
 */
function getSharedTeams($UID)
{
  global $user;

  $currentUserTIDs = dbGetTIDsForUser($user->uid);
  $otherUserTIDs = dbGetTIDsForUser($UID);
  if (!empty($currentUserTIDs) && !empty($otherUserTIDs)){
    $sameTeams = array_intersect($otherUserTIDs, $currentUserTIDs);
    return $sameTeams;
  }

  return false;
}

/* isOnMyTeam() - returns whether or not the given user is on the team of the user currently logged in
 */
function isOnMyTeam($UID)
{
  return !empty(getSharedTeams($UID));
}

/* isMyTeam() - checks if the given $TID is one of the teams the current user belongs to
 */
function isMyTeam($TID)
{
  global $user;
 
  $userTIDs = dbGetTIDsForUser($user->uid);
 
  if($userTIDs !== false){
    return in_array($TID, $userTIDs);
  }
  return false;
}

/* isMyOutreach() - checks if the current user owns the given outreach
 */
function isMyOutreach($OID)
{
  global $user;
  return $user->uid == dbGetOutreachOwner($OID);
}

/* isMyHours() - checks if the given hours record belongs to the current user
 */
function isMyHours($HID)
{
  global $user;
  return $user->uid == dbGetUserForHours($HID);
}

/* isMyNotification() - checks if the given hours record belongs to the current user
 */
function isMyNotification($NID)
{
  global $user;
  return $user->uid == dbGetUserForNotification($NID);
}

/* isMyMedia() - checks if the given media belongs to the current user
 */
function isMyMedia($MID)
{
  global $user;
  return $user->uid == dbGetUserForMedia($MID);
}

function isAdmin()
{
  $role = user_role_load_by_name('Administrator');
  return user_has_role($role->rid);
}

function notifyUsersByRole($notificationContents, $role)
{
  global $user;
  $people = dbSelectTeamMembersByRole($notificationContents['TID'], $role);
  $notification = $notificationContents;
  foreach ($people as $UID){
    if($user->uid != $UID){ // not the current user
      $notification['UID'] = $UID;
      dbAddNotification($notification);
    }
  }
}

/* hasPermissionForTeam() - returns if the current user has permission to complete an action associated with that team */
function hasPermissionForTeam($permission, $TID)
{
  global $user;

  return dbUserHasPermissionForTeam($user->uid, $permission, $TID);
}

// TODO - why is this here?!?!?!?!?!?!
function requestTeamForUser($UID, $TID)
{
  $name = dbGetUserName($UID);
  $title = 'Team Member Join Request: ' . $name;
  $content = $name . ' has requested to join Team ' . dbGetTeam($TID)['number'] . '. Click <a href="?q=approveUser&UID=' . $UID . '&TID=' . $TID . '">here</a> to review and approve this member.';
  $notif = array(
                 'TID'=>$TID,
                 'title'=>$title,
                 'message'=>$content
                 );
  return notifyUsersByRole($notif, 'teamAdmin');
}

/* notifyOwnerOfOutreach() - notifies the owner of an outreach if the owner is NOT the current user.
 */
function notifyOwnerOfOutreach($OID, $notification)
{
  global $user;

  $UID = dbGetOutreachOwner($OID);
  if ($UID != $user->uid){
    $notification['UID'] = $UID;
    dbAddNotification($notification);
    return true;
  }
  return false;
}

function notifyUsersOnTeam($notification, $TID)
{
  global $user;
  $UIDs = dbGetUIDsFromTeam($TID);
  foreach ($UIDs as $UID){
    if ($UID != $user->uid){
      $notification['UID'] = $UID;
      dbAddNotification($notification);
    }
  }
}

function notifyUser($notification, $UID)
{
  global $user;
  $notification['UID'] = $UID;
  dbAddNotification($notification);
}

function generateMailHeader()
{
  $HTML = '<div style="background-color:#fbfbfb; border:1px solid #e1e1e2;width:60%;margin:auto">';
  $HTML .= '<table><tr><td style="text-align:center">';
  return $HTML;
}

function generateMailFooter()
{
  $HTML = '</td></tr>';
  $HTML .= '<tr><td style="text-align:center">';
  $HTML .= '<img src="http://croma.chapresearch.com'.PORT.'/images/homePage/CROMALogo.png" width="200px" height="80px">';
  $HTML .= '</td></tr>';
  $HTML .= '</table>';
  return $HTML;
}

/* getCurrentURL() - returns the current URL, using the $_SERVER array. Note that
this can be spoofed by the client (and will break if you use something other than https
*/
function getCurrentURL()
{
  $url = 'http://'.$_SERVER['HTTP_HOST'];
  $url .= $_SERVER['REQUEST_URI'];

  return $url;
}

/* getAjaxURL() - returns the special URL for processing AJAX requests via Drupal
 */
function getAjaxURL()
{
 $url = 'http://'.$_SERVER['HTTP_HOST'];
 $url .= '/?q=system/ajax';
  
  return $url;
}

/* parseURLAlias() - returns the URL alias of a Drupal URL, given the full url.
ex: http://croma.chapresearch.com/?q=viewOutreachSettings&edit= 
 -->  returns viewOutreachSettings
*/
function parseURLAlias($url)
{
  $matches = array();
  preg_match('/(?<=q=)\w*/', $url, $matches);
  return $matches[0];
}

function fillFromSession($fieldName, $default = '')
{
  if (isset($_SESSION['searchParams'][$fieldName])){
    $value = $_SESSION['searchParams'][$fieldName];
  }

  if (isset($value)){
    if (isset($value['value'])){
      return $value['value']; // deal with nesting
    } else {
      return $value;
    }
  }
  return $default;
}

?>